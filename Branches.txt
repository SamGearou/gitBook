A branch in Git is simply a lightweight movable pointer to one 
of these commits. The default branch name in Git is master. As 
you start making commits, you’re given a master branch that points 
to the last commit you made. Every time you commit, it moves forward 
automatically. The “master” branch in Git is not a special branch. It 
is exactly like any other branch. The only reason nearly every repository 
has one is that the git init command creates it by default and most people 
don’t bother to change it.

To create a new branch, the command is: git branch nameOfBranch.
This creates a new pointer at the same commit you're currently on.
HEAD is a special pointer that tells you which local branch you are
currently on. Creating a new branch doesn't move the HEAD to that branch.
To switch branches, you use this command: git checkout nameOfBranch.
This moves HEAD to the nameOfBranch branch. It is important to note that
switching branches changes files in your working directory. to make a new
branch and switch to it at the same time , the command is as follows:
git checkout -b nameOfBranch. to delete a branch, the command is:
git branch -d nameOfBranch.Say you have two branches, master and deploy,
to merge master to deploy, since deploy is ahead of master by some commits,
you perform what's called a fast-forward.  To do this, you switch to the 
master branch, and then merge deploy. It would look like this:
git checkout master
git merge deploy
This is called a fast-forward.

When you switch branches, it is important to have a clean working directory.