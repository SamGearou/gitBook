After you have created several commits,
or if you have cloned a repository with an existing commit history,
you'll probably want to look back to see what happened. 
You can do this using the git log command. 
By default, with no arguments, git log lists
the commits made in that repository in reverse chronological order,
that is, the most recent commits show up first.
The weird 40 character code is called a SHA-1.
git log -p shows the difference introduced in each commit. 
git -p -2 will give you the difference as well as
limiting the output to only the last two entries.
The git log --stat command will give you abbreviated
stats for each commit. The git log --pretty option 
changes the log output to formats other than the default.
Using git log --pretty=oneline will print each commit
on one line. git log --pretty format:"" is another
useful command (formats the log output). git log --graph
displays an ASCII graph shwoing your branch and merge history. 
Go to git Log options folder on the desktop and go to the 
file named "Limiting Output.txt" to see more information.    
